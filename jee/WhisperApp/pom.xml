<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>fmin.362</groupId>
    <artifactId>WhisperApp</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>

    <name>WhisperApp</name>

    <properties>
        <endorsed.dir>${project.build.directory}/endorsed</endorsed.dir>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    
    <!-- Dependances relatives à eclipselink (implementation de JPA). -->
    <dependencies>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>eclipselink</artifactId>
            <version>2.5.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>org.eclipse.persistence.jpa.modelgen.processor</artifactId>
            <version>2.5.1</version>
            <scope>provided</scope>
        </dependency>
        <!-- Dependance relative au webprofil: Le profil Web est composé d'un ensemble complet d' API Java EE 7
        (JAX-RS entre autre) qui est nécessaire pour la majorité des applications web modernes. -->
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-web-api</artifactId>
            <version>7.0</version>
            <scope>provided</scope>
        </dependency>   
        
        <!-- Dependances relatives aux tests. -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.10</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.restfuse</groupId>
            <artifactId>com.eclipsesource.restfuse</artifactId>
            <version>1.2.0</version>
        </dependency>
            
    </dependencies>

    <build>
        <plugins>
            
            <plugin>
                <groupId>org.glassfish.embedded</groupId>
                <artifactId>maven-embedded-glassfish-plugin</artifactId>
                <version>4.0</version>
                <configuration>
                    <!--                     Définit le chemin à utiliser pour utiliser le war construit dans le target directory. -->
                    <app>target/${project.build.finalName}</app>
                    <port>9000</port>            
                    <!--                     Ici on supprime les fichiers temporaires pendant l'extinction de GlassFish. -->
                    <autoDelete>true</autoDelete>
                </configuration>
                <executions>
                    <execution>
                        <id>start</id>
                        <!--                         On implemente les tests d'intégration en configurant notre instance de GlassFish pour démarrer et déployer notre application. -->
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>start</goal>
                            <goal>deploy</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop</id>
                        <!--                         Après la phase d'intégration on supprime l'application et on étient GlassFish. -->
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>undeploy</goal>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.16</version>
                <!--                 On laisse de coté les test du cycle de vie qu'on testera plus tard lors de la phase d'intégration de test. -->
                <configuration>
                    <skip>true</skip>
                </configuration>
                <executions>
                    <execution>
                        <phase>integration-test</phase>
                        <goals>
                            <!--                             Pendant l'intégration-test on execute surefire:test. -->
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <!--                             On réactivé les tests qui ont été désactivées auparavant. -->
                            <skip>false</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            
            <!-- Plugin qui permet de compiler les sources du projet. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                    <compilerArguments>
                        <endorseddirs>${endorsed.dir}</endorseddirs>
                    </compilerArguments>
                </configuration>
            </plugin>
            <!-- maven-war-plugin est responsable de la collecte de toutes les dépendances 
            d'artefacts, des classes et des ressources de l'application Web et du packaging 
            dans une archive d'applications web. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.3</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
            <!--  Le maven-dependency-plugin offre la possibilité de manipuler des objets.
            Il peut copier et / ou décompresser des artefacts de dépôts locaux ou distants à un emplacement spécifié.
            ****** Pluging pas indispensable vu qu'on a deja javaee-web-api dans les dépendance ****** -->
            <plugin>         
                <!-- javaee-endorsed-api: copie du package API Java EE 7 dans le répertoire endorsed. 
                Ceci peut être utile si on décide de démarrer le serveur 
                Jetty et faire quelques essais en "phase de test" (par exemple avec JUnit)-->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${endorsed.dir}</outputDirectory>
                            <silent>true</silent>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>javax</groupId>
                                    <artifactId>javaee-endorsed-api</artifactId>
                                    <version>7.0</version>
                                    <type>jar</type>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
